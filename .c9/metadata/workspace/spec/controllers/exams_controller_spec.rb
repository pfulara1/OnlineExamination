{"changed":true,"filter":false,"title":"exams_controller_spec.rb","tooltip":"/spec/controllers/exams_controller_spec.rb","value":"require 'rails_helper'\n\n# This spec was generated by rspec-rails when you ran the scaffold generator.\n# It demonstrates how one might use RSpec to specify the controller code that\n# was generated by Rails when you ran the scaffold generator.\n#\n# It assumes that the implementation code is generated by the rails scaffold\n# generator.  If you are using any extension libraries to generate different\n# controller code, this generated spec may or may not pass.\n#\n# It only uses APIs available in rails and/or rspec-rails.  There are a number\n# of tools you can use to make these specs even more expressive, but we're\n# sticking to rails and rspec-rails APIs to keep things simple and stable.\n#\n# Compared to earlier versions of this generator, there is very limited use of\n# stubs and message expectations in this spec.  Stubs are only used when there\n# is no simpler way to get a handle on the object needed for the example.\n# Message expectations are only used when there is no simpler way to specify\n# that an instance is receiving a specific message.\n\ndescribe ExamsController do\n\n  # This should return the minimal set of attributes required to create a valid\n  # Exam. As you add validations to Exam, be sure to\n  # adjust the attributes here as well.\n  #let(:valid_attributes) {\n  #   skip(\"Add a hash of attributes valid for your model\")\n  # }\n\n  #let(:invalid_attributes) {\n  #  skip(\"Add a hash of attributes invalid for your model\")\n  #}\n\n  # This should return the minimal set of values that should be in the session\n  # in order to pass any filters (e.g. authentication) defined in\n  # ExamsController. Be sure to keep this updated too.\n # let(:valid_session) { {} }\n  let(:exam1){double (\"exam1\")}\n  let(:exam2){double (\"exam2\")}\n  let(:exam3){double (\"exam3\")}\n  let(:exam4){double (\"exam4\")}\n  let(:exam5){double (\"exam5\")}\n  let(:exams){[exam1,exam2,exam3,exam4,exam5]}\n  \n  describe \"#index\" do\n    it \"collects all of the exams\" do\n      expect(Exam).to receive(:all).and_return(exams)\n      get :index\n    end\n    it \"displays all exams\" do\n      allow(Exam).to receive(:all).and_return(exams)\n      #exam = Exam.create! valid_attributes\n      get :index\n      expect(assigns(:exams)).to eq(exams)\n    end\n    it \"selects the index template for rendering\" do\n      allow(Exam).to receive(:all).and_return(exams)\n      get :index\n      expect(response).to render_template(\"index\")\n    end\n  end\n  \n  describe \"#new\" do\n    it \"selects new template for rendering\" do\n      get :new \n      expect(response).to render_template(\"new\")\n    end\n  end\n  \n  \n  \n  describe \"#create\" do\n    let(:params){{:name=>\"exam1\"}}\n    let(:exam){double(\"exam\",params)}\n    it \"creates a new exam\" do\n      \n      expect(Exam).to receive(:create!).with(params).and_return(exam)\n      post :create, exam: params\n      \n    end\n    it \"sets a flash message\" do\n      allow(Exam).to receive(:create!).with(params).and_return(exam)\n      post :create, exam: params\n      expect(flash[:notice]).to match(/^.* was successfully created.$/)\n      \n    end\n    \n    it \"redirects to the exam index page\" do\n      allow(Exam).to receive(:create!).with(params).and_return(exam)\n      post :create, exam: params\n      \n      expect(response).to redirect_to(exams_path)\n    end\n  end\n  \n  describe \"#destroy\" do\n    \n    it \"deletes the particular exam \" do\n      expect(Exam).to receive(:all).and_return(exams)\n      get :index\n      expect(response).to render_template(\"index\")\n    end\n   \n  \n    it \"should set the flash\" do\n        delete :destroy\n        flash[:notice].should =~ /successful/i\n    end\n\n  \n  \n    \n  end\n  \n    \n=begin\n  raise 'A test exception.'\nrescue Exception => e\n  puts e.message\n  puts e.backtrace.inspect\nelse\n  # other exception\nensure\n  # always executed\nend\n  describe \"GET #show\" do\n    it \"assigns the requested exam as @exam\" do\n      exam = Exam.create! valid_attributes\n      get :show, {:id => exam.to_param}, valid_session\n      expect(assigns(:exam)).to eq(exam)\n    end\n  end\n\n  describe \"GET #new\" do\n    it \"assigns a new exam as @exam\" do\n      get :new, {}, valid_session\n      expect(assigns(:exam)).to be_a_new(Exam)\n    end\n  end\n\n  describe \"GET #edit\" do\n    it \"assigns the requested exam as @exam\" do\n      exam = Exam.create! valid_attributes\n      get :edit, {:id => exam.to_param}, valid_session\n      expect(assigns(:exam)).to eq(exam)\n    end\n  end\n\n  describe \"POST #create\" do\n    context \"with valid params\" do\n      it \"creates a new Exam\" do\n        expect {\n          post :create, {:exam => valid_attributes}, valid_session\n        }.to change(Exam, :count).by(1)\n      end\n\n      it \"assigns a newly created exam as @exam\" do\n        post :create, {:exam => valid_attributes}, valid_session\n        expect(assigns(:exam)).to be_a(Exam)\n        expect(assigns(:exam)).to be_persisted\n      end\n\n      it \"redirects to the created exam\" do\n        post :create, {:exam => valid_attributes}, valid_session\n        expect(response).to redirect_to(Exam.last)\n      end\n    end\n\n    context \"with invalid params\" do\n      it \"assigns a newly created but unsaved exam as @exam\" do\n        post :create, {:exam => invalid_attributes}, valid_session\n        expect(assigns(:exam)).to be_a_new(Exam)\n      end\n\n      it \"re-renders the 'new' template\" do\n        post :create, {:exam => invalid_attributes}, valid_session\n        expect(response).to render_template(\"new\")\n      end\n    end\n  end\n\n  describe \"PUT #update\" do\n    context \"with valid params\" do\n      let(:new_attributes) {\n        skip(\"Add a hash of attributes valid for your model\")\n      }\n\n      it \"updates the requested exam\" do\n        exam = Exam.create! valid_attributes\n        put :update, {:id => exam.to_param, :exam => new_attributes}, valid_session\n        exam.reload\n        skip(\"Add assertions for updated state\")\n      end\n\n      it \"assigns the requested exam as @exam\" do\n        exam = Exam.create! valid_attributes\n        put :update, {:id => exam.to_param, :exam => valid_attributes}, valid_session\n        expect(assigns(:exam)).to eq(exam)\n      end\n\n      it \"redirects to the exam\" do\n        exam = Exam.create! valid_attributes\n        put :update, {:id => exam.to_param, :exam => valid_attributes}, valid_session\n        expect(response).to redirect_to(exam)\n      end\n    end\n\n    context \"with invalid params\" do\n      it \"assigns the exam as @exam\" do\n        exam = Exam.create! valid_attributes\n        put :update, {:id => exam.to_param, :exam => invalid_attributes}, valid_session\n        expect(assigns(:exam)).to eq(exam)\n      end\n\n      it \"re-renders the 'edit' template\" do\n        exam = Exam.create! valid_attributes\n        put :update, {:id => exam.to_param, :exam => invalid_attributes}, valid_session\n        expect(response).to render_template(\"edit\")\n      end\n    end\n  end\n\n  describe \"DELETE #destroy\" do\n    it \"destroys the requested exam\" do\n      exam = Exam.create! valid_attributes\n      expect {\n        delete :destroy, {:id => exam.to_param}, valid_session\n      }.to change(Exam, :count).by(-1)\n    end\n\n    it \"redirects to the exams list\" do\n      exam = Exam.create! valid_attributes\n      delete :destroy, {:id => exam.to_param}, valid_session\n      expect(response).to redirect_to(exams_url)\n    end\n  end\n=end\nend\n","undoManager":{"mark":-4,"position":100,"stack":[[{"start":{"row":95,"column":3},"end":{"row":95,"column":4},"action":"insert","lines":["e"],"id":1209}],[{"start":{"row":95,"column":4},"end":{"row":95,"column":5},"action":"insert","lines":["s"],"id":1210}],[{"start":{"row":95,"column":5},"end":{"row":95,"column":6},"action":"insert","lines":["c"],"id":1211}],[{"start":{"row":95,"column":6},"end":{"row":95,"column":7},"action":"insert","lines":["r"],"id":1212}],[{"start":{"row":95,"column":7},"end":{"row":95,"column":8},"action":"insert","lines":["i"],"id":1213}],[{"start":{"row":95,"column":8},"end":{"row":95,"column":9},"action":"insert","lines":["b"],"id":1214}],[{"start":{"row":95,"column":9},"end":{"row":95,"column":10},"action":"insert","lines":["e"],"id":1215}],[{"start":{"row":95,"column":10},"end":{"row":95,"column":11},"action":"insert","lines":[" "],"id":1216}],[{"start":{"row":95,"column":11},"end":{"row":95,"column":12},"action":"insert","lines":["#"],"id":1217}],[{"start":{"row":95,"column":11},"end":{"row":95,"column":12},"action":"remove","lines":["#"],"id":1218}],[{"start":{"row":95,"column":11},"end":{"row":95,"column":13},"action":"insert","lines":["\"\""],"id":1219}],[{"start":{"row":95,"column":12},"end":{"row":95,"column":13},"action":"insert","lines":["#"],"id":1220}],[{"start":{"row":95,"column":13},"end":{"row":95,"column":14},"action":"insert","lines":["d"],"id":1221}],[{"start":{"row":95,"column":14},"end":{"row":95,"column":15},"action":"insert","lines":["e"],"id":1222}],[{"start":{"row":95,"column":15},"end":{"row":95,"column":16},"action":"insert","lines":["s"],"id":1223}],[{"start":{"row":95,"column":16},"end":{"row":95,"column":17},"action":"insert","lines":["t"],"id":1224}],[{"start":{"row":95,"column":17},"end":{"row":95,"column":18},"action":"insert","lines":["r"],"id":1225}],[{"start":{"row":95,"column":18},"end":{"row":95,"column":19},"action":"insert","lines":["o"],"id":1226}],[{"start":{"row":95,"column":19},"end":{"row":95,"column":20},"action":"insert","lines":["y"],"id":1227}],[{"start":{"row":95,"column":21},"end":{"row":95,"column":22},"action":"insert","lines":[" "],"id":1228}],[{"start":{"row":95,"column":22},"end":{"row":95,"column":23},"action":"insert","lines":["d"],"id":1229}],[{"start":{"row":95,"column":23},"end":{"row":95,"column":24},"action":"insert","lines":["o"],"id":1230}],[{"start":{"row":95,"column":22},"end":{"row":95,"column":24},"action":"remove","lines":["do"],"id":1231},{"start":{"row":95,"column":22},"end":{"row":95,"column":24},"action":"insert","lines":["do"]}],[{"start":{"row":95,"column":24},"end":{"row":96,"column":0},"action":"insert","lines":["",""],"id":1232},{"start":{"row":96,"column":0},"end":{"row":96,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":95,"column":24},"end":{"row":96,"column":0},"action":"insert","lines":["",""],"id":1233},{"start":{"row":96,"column":0},"end":{"row":96,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":96,"column":4},"end":{"row":96,"column":5},"action":"insert","lines":["e"],"id":1234}],[{"start":{"row":96,"column":5},"end":{"row":96,"column":6},"action":"insert","lines":["n"],"id":1235}],[{"start":{"row":96,"column":6},"end":{"row":96,"column":7},"action":"insert","lines":["d"],"id":1236},{"start":{"row":96,"column":2},"end":{"row":96,"column":4},"action":"remove","lines":["  "]}],[{"start":{"row":96,"column":5},"end":{"row":97,"column":0},"action":"insert","lines":["",""],"id":1237},{"start":{"row":97,"column":0},"end":{"row":97,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":95,"column":24},"end":{"row":96,"column":0},"action":"insert","lines":["",""],"id":1238},{"start":{"row":96,"column":0},"end":{"row":96,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":95,"column":24},"end":{"row":96,"column":0},"action":"insert","lines":["",""],"id":1239},{"start":{"row":96,"column":0},"end":{"row":96,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":96,"column":4},"end":{"row":97,"column":0},"action":"insert","lines":["",""],"id":1240},{"start":{"row":97,"column":0},"end":{"row":97,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":97,"column":4},"end":{"row":112,"column":5},"action":"insert","lines":["it \"collects all of the exams\" do","      expect(Exam).to receive(:all).and_return(exams)","      get :index","    end","    it \"displays all exams\" do","      allow(Exam).to receive(:all).and_return(exams)","      #exam = Exam.create! valid_attributes","      get :index","      expect(assigns(:exams)).to eq(exams)","    end","    it \"selects the index template for rendering\" do","      allow(Exam).to receive(:all).and_return(exams)","      get :index","      expect(response).to render_template(\"index\")","    end","  end"],"id":1241}],[{"start":{"row":112,"column":4},"end":{"row":112,"column":5},"action":"remove","lines":["d"],"id":1242}],[{"start":{"row":112,"column":3},"end":{"row":112,"column":4},"action":"remove","lines":["n"],"id":1243}],[{"start":{"row":112,"column":2},"end":{"row":112,"column":3},"action":"remove","lines":["e"],"id":1244}],[{"start":{"row":97,"column":32},"end":{"row":97,"column":33},"action":"remove","lines":["s"],"id":1245}],[{"start":{"row":97,"column":31},"end":{"row":97,"column":32},"action":"remove","lines":["m"],"id":1246}],[{"start":{"row":97,"column":30},"end":{"row":97,"column":31},"action":"remove","lines":["a"],"id":1247}],[{"start":{"row":97,"column":29},"end":{"row":97,"column":30},"action":"remove","lines":["x"],"id":1248}],[{"start":{"row":97,"column":28},"end":{"row":97,"column":29},"action":"remove","lines":["e"],"id":1249}],[{"start":{"row":97,"column":27},"end":{"row":97,"column":28},"action":"remove","lines":[" "],"id":1250}],[{"start":{"row":97,"column":26},"end":{"row":97,"column":27},"action":"remove","lines":["e"],"id":1251}],[{"start":{"row":97,"column":25},"end":{"row":97,"column":26},"action":"remove","lines":["h"],"id":1252}],[{"start":{"row":97,"column":24},"end":{"row":97,"column":25},"action":"remove","lines":["t"],"id":1253}],[{"start":{"row":97,"column":23},"end":{"row":97,"column":24},"action":"remove","lines":[" "],"id":1254}],[{"start":{"row":97,"column":22},"end":{"row":97,"column":23},"action":"remove","lines":["f"],"id":1255}],[{"start":{"row":97,"column":21},"end":{"row":97,"column":22},"action":"remove","lines":["o"],"id":1256}],[{"start":{"row":97,"column":20},"end":{"row":97,"column":21},"action":"remove","lines":[" "],"id":1257}],[{"start":{"row":97,"column":19},"end":{"row":97,"column":20},"action":"remove","lines":["l"],"id":1258}],[{"start":{"row":97,"column":18},"end":{"row":97,"column":19},"action":"remove","lines":["l"],"id":1259}],[{"start":{"row":97,"column":17},"end":{"row":97,"column":18},"action":"remove","lines":["a"],"id":1260}],[{"start":{"row":97,"column":16},"end":{"row":97,"column":17},"action":"remove","lines":[" "],"id":1261}],[{"start":{"row":97,"column":15},"end":{"row":97,"column":16},"action":"remove","lines":["s"],"id":1262}],[{"start":{"row":97,"column":14},"end":{"row":97,"column":15},"action":"remove","lines":["t"],"id":1263}],[{"start":{"row":97,"column":13},"end":{"row":97,"column":14},"action":"remove","lines":["c"],"id":1264}],[{"start":{"row":97,"column":12},"end":{"row":97,"column":13},"action":"remove","lines":["e"],"id":1265}],[{"start":{"row":97,"column":11},"end":{"row":97,"column":12},"action":"remove","lines":["l"],"id":1266}],[{"start":{"row":97,"column":10},"end":{"row":97,"column":11},"action":"remove","lines":["l"],"id":1267}],[{"start":{"row":97,"column":9},"end":{"row":97,"column":10},"action":"remove","lines":["o"],"id":1268}],[{"start":{"row":97,"column":8},"end":{"row":97,"column":9},"action":"remove","lines":["c"],"id":1269}],[{"start":{"row":97,"column":8},"end":{"row":97,"column":9},"action":"insert","lines":["d"],"id":1270}],[{"start":{"row":97,"column":9},"end":{"row":97,"column":10},"action":"insert","lines":["e"],"id":1271}],[{"start":{"row":97,"column":10},"end":{"row":97,"column":11},"action":"insert","lines":["l"],"id":1272}],[{"start":{"row":97,"column":11},"end":{"row":97,"column":12},"action":"insert","lines":["e"],"id":1273}],[{"start":{"row":97,"column":12},"end":{"row":97,"column":13},"action":"insert","lines":["t"],"id":1274}],[{"start":{"row":97,"column":13},"end":{"row":97,"column":14},"action":"insert","lines":["e"],"id":1275}],[{"start":{"row":97,"column":14},"end":{"row":97,"column":15},"action":"insert","lines":[" "],"id":1276}],[{"start":{"row":97,"column":14},"end":{"row":97,"column":15},"action":"remove","lines":[" "],"id":1277}],[{"start":{"row":97,"column":14},"end":{"row":97,"column":15},"action":"insert","lines":["s"],"id":1278}],[{"start":{"row":97,"column":15},"end":{"row":97,"column":16},"action":"insert","lines":[" "],"id":1279}],[{"start":{"row":97,"column":16},"end":{"row":97,"column":17},"action":"insert","lines":["t"],"id":1280}],[{"start":{"row":97,"column":17},"end":{"row":97,"column":18},"action":"insert","lines":["h"],"id":1281}],[{"start":{"row":97,"column":18},"end":{"row":97,"column":19},"action":"insert","lines":["e"],"id":1282}],[{"start":{"row":97,"column":19},"end":{"row":97,"column":20},"action":"insert","lines":[" "],"id":1283}],[{"start":{"row":97,"column":20},"end":{"row":97,"column":21},"action":"insert","lines":["p"],"id":1284}],[{"start":{"row":97,"column":21},"end":{"row":97,"column":22},"action":"insert","lines":["a"],"id":1285}],[{"start":{"row":97,"column":22},"end":{"row":97,"column":23},"action":"insert","lines":["r"],"id":1286}],[{"start":{"row":97,"column":23},"end":{"row":97,"column":24},"action":"insert","lines":["t"],"id":1287}],[{"start":{"row":97,"column":24},"end":{"row":97,"column":25},"action":"insert","lines":["i"],"id":1288}],[{"start":{"row":97,"column":25},"end":{"row":97,"column":26},"action":"insert","lines":["c"],"id":1289}],[{"start":{"row":97,"column":26},"end":{"row":97,"column":27},"action":"insert","lines":["u"],"id":1290}],[{"start":{"row":97,"column":27},"end":{"row":97,"column":28},"action":"insert","lines":["l"],"id":1291}],[{"start":{"row":97,"column":28},"end":{"row":97,"column":29},"action":"insert","lines":["a"],"id":1292}],[{"start":{"row":97,"column":29},"end":{"row":97,"column":30},"action":"insert","lines":["r"],"id":1293}],[{"start":{"row":97,"column":30},"end":{"row":97,"column":31},"action":"insert","lines":[" "],"id":1294}],[{"start":{"row":97,"column":31},"end":{"row":97,"column":32},"action":"insert","lines":["e"],"id":1295}],[{"start":{"row":97,"column":32},"end":{"row":97,"column":33},"action":"insert","lines":["x"],"id":1296}],[{"start":{"row":97,"column":33},"end":{"row":97,"column":34},"action":"insert","lines":["a"],"id":1297}],[{"start":{"row":97,"column":34},"end":{"row":97,"column":35},"action":"insert","lines":[" "],"id":1298}],[{"start":{"row":97,"column":34},"end":{"row":97,"column":35},"action":"remove","lines":[" "],"id":1299}],[{"start":{"row":97,"column":34},"end":{"row":97,"column":35},"action":"insert","lines":["m"],"id":1300}],[{"start":{"row":97,"column":35},"end":{"row":97,"column":36},"action":"insert","lines":[" "],"id":1301}],[{"start":{"row":101,"column":3},"end":{"row":106,"column":7},"action":"remove","lines":[" it \"displays all exams\" do","      allow(Exam).to receive(:all).and_return(exams)","      #exam = Exam.create! valid_attributes","      get :index","      expect(assigns(:exams)).to eq(exams)","    end"],"id":1302}],[{"start":{"row":99,"column":16},"end":{"row":100,"column":0},"action":"insert","lines":["",""],"id":1303},{"start":{"row":100,"column":0},"end":{"row":100,"column":6},"action":"insert","lines":["      "]}],[{"start":{"row":100,"column":6},"end":{"row":100,"column":50},"action":"insert","lines":["expect(response).to render_template(\"index\")"],"id":1304}],[{"start":{"row":103,"column":2},"end":{"row":107,"column":7},"action":"remove","lines":["  it \"selects the index template for rendering\" do","      allow(Exam).to receive(:all).and_return(exams)","      get :index","      expect(response).to render_template(\"index\")","    end"],"id":1305}],[{"start":{"row":102,"column":3},"end":{"row":103,"column":0},"action":"insert","lines":["",""],"id":1306},{"start":{"row":103,"column":0},"end":{"row":103,"column":3},"action":"insert","lines":["   "]}],[{"start":{"row":103,"column":3},"end":{"row":108,"column":3},"action":"insert","lines":["describe \"DELETE destroy\" do","    it \"should set the flash\" do","        delete :destroy","        flash[:notice].should =~ /successful/i","    end","end"],"id":1307}],[{"start":{"row":108,"column":0},"end":{"row":108,"column":3},"action":"remove","lines":["end"],"id":1308}],[{"start":{"row":103,"column":2},"end":{"row":103,"column":31},"action":"remove","lines":[" describe \"DELETE destroy\" do"],"id":1309}]]},"ace":{"folds":[],"scrolltop":1256.6210179328918,"scrollleft":0,"selection":{"start":{"row":104,"column":32},"end":{"row":104,"column":32},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":89,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1492811192979}